class NFTCases {
    constructor() {
        this.userData = this.loadUserData();
        this.isOpening = false;
        this.nftCollection = [];
        this.currentCase = null;
        this.animationId = null;
        this.currentSpeed = 0;
        this.currentPosition = 0;
        this.init();
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    loadUserData() {
        const userCookie = this.getCookie('nft_cases_user');
        if (userCookie) {
            try {
                return JSON.parse(userCookie);
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', e);
            }
        }
        
        return {
            id: 'user_' + Math.random().toString(36).substr(2, 9),
            username: '–ò–≥—Ä–æ–∫' + Math.floor(Math.random() * 1000),
            balance: 25,
            registrationDate: new Date().toISOString(),
            stats: {
                totalOpened: 0,
                totalNFTWon: 0,
                mostExpensiveNFT: 0
            },
            inventory: []
        };
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    saveUserData() {
        this.setCookie('nft_cases_user', JSON.stringify(this.userData), 365);
    }

    // –†–∞–±–æ—Ç–∞ —Å –∫—É–∫–∏
    setCookie(name, value, days) {
        const date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        document.cookie = `${name}=${encodeURIComponent(value)};expires=${date.toUTCString()};path=/`;
    }

    getCookie(name) {
        const cookies = document.cookie.split(';');
        for (let cookie of cookies) {
            const [key, value] = cookie.trim().split('=');
            if (key === name) return decodeURIComponent(value);
        }
        return null;
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ NFT –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –∫–µ–π—Å–æ–≤
    async loadNFTCollection() {
        console.log('üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ NFT –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –∫–µ–π—Å–æ–≤...');
        
        const basePath = 'NFT/';
        
        // –ö–æ–ª–ª–µ–∫—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —à–∞–Ω—Å–∞–º–∏ –≤—ã–ø–∞–¥–µ–Ω–∏—è
        this.nftCollection = [
            // 15 –∑–≤–µ–∑–¥ (60% —à–∞–Ω—Å)
            { id: 1, name: '–ú–µ–¥–≤–µ–¥—å', image: `${basePath}bear/bear.gif`, value: 15, rarity: 'common', weight: 80, fallback: 'üß∏' },
            { id: 2, name: '–°–µ—Ä–¥—Ü–µ', image: `${basePath}heart/heart.gif`, value: 15, rarity: 'common', weight: 80, fallback: '‚ù§Ô∏è' },

            // 25 –∑–≤–µ–∑–¥ (20% —à–∞–Ω—Å)
            { id: 3, name: '–†–æ–∑–∞', image: `${basePath}rose/rose.gif`, value: 25, rarity: 'uncommon', weight: 10, fallback: 'üåπ' },
            { id: 4, name: '–ü–æ–¥–∞—Ä–æ–∫', image: `${basePath}gift/gift.gif`, value: 25, rarity: 'uncommon', weight: 10, fallback: 'üéÅ' },

            // 50 –∑–≤–µ–∑–¥ (15% —à–∞–Ω—Å)
            { id: 5, name: '–¢–æ—Ä—Ç', image: `${basePath}cake/cake.gif`, value: 50, rarity: 'rare', weight: 7, fallback: 'üéÇ' },
            { id: 6, name: '–†–∞–∫–µ—Ç–∞', image: `${basePath}rocket/rocket.gif`, value: 50, rarity: 'rare', weight: 7, fallback: 'üöÄ' },
            { id: 7, name: '–¶–≤–µ—Ç—ã', image: `${basePath}flowers/flowers.gif`, value: 50, rarity: 'rare', weight: 7, fallback: 'üíê' },

            // 100 –∑–≤–µ–∑–¥ (5% —à–∞–Ω—Å)
            { id: 8, name: '–ö—É–±–æ–∫', image: `${basePath}cup/cup.gif`, value: 100, rarity: 'epic', weight: 3, fallback: 'üèÜ' },
            { id: 9, name: '–ö–æ–ª—å—Ü–æ', image: `${basePath}ring/ring.gif`, value: 100, rarity: 'epic', weight: 3, fallback: 'üíç' },
            { id: 10, name: '–ê–ª–º–∞–∑', image: `${basePath}diamond/diamond.gif`, value: 100, rarity: 'epic', weight: 3, fallback: 'üíé' },
        ];

        console.log('‚úÖ NFT –∫–æ–ª–ª–µ–∫—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —à–∞–Ω—Å–∞–º–∏');
        return Promise.resolve();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    async init() {
        console.log('üéÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è NFT Cases');
        
        await this.loadNFTCollection();
        this.showLoadingScreen();
    }

    // –≠–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
    showLoadingScreen() {
        console.log('üì± –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏');
        const startTime = Date.now();
        const loadingTime = 1500;
        
        const updateTime = () => {
            const elapsed = (Date.now() - startTime) / 1000;
            document.getElementById('loading-time').textContent = elapsed.toFixed(2) + 's';
            
            if (elapsed * 1000 < loadingTime) {
                requestAnimationFrame(updateTime);
            } else {
                this.completeLoading();
            }
        };
        
        updateTime();
    }

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    completeLoading() {
        console.log('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        document.getElementById('loading').style.display = 'none';
        document.querySelector('.container').style.display = 'block';
        this.setupEventListeners();
        this.updateUI();
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    setupEventListeners() {
        console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π');
        
        document.getElementById('cases-btn').addEventListener('click', () => {
            this.showSection('cases-section');
        });
        
        document.getElementById('inventory-btn').addEventListener('click', () => {
            this.showSection('inventory-section');
            this.updateInventory();
        });
        
        document.getElementById('profile-btn').addEventListener('click', () => {
            this.showSection('profile-section');
            this.updateProfile();
        });

        // –í—ã–±–æ—Ä –∫–µ–π—Å–∞
        document.querySelectorAll('.case-card').forEach(card => {
            card.addEventListener('click', (e) => {
                const caseType = e.currentTarget.dataset.case;
                this.selectCase(caseType);
            });
        });

        // –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞
        document.getElementById('open-case-btn').addEventListener('click', () => {
            this.openCase();
        });

        // –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫–µ–π—Å–æ–≤
        document.getElementById('back-to-cases').addEventListener('click', () => {
            this.showCaseSelection();
        });

        // –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –∫–µ–π—Å–æ–≤
        document.getElementById('back-cases-main').addEventListener('click', () => {
            this.showSection('main-menu');
        });

        // –ö–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
        document.getElementById('back-btn-inventory').addEventListener('click', () => {
            this.showSection('main-menu');
        });
        
        document.getElementById('back-btn-profile').addEventListener('click', () => {
            this.showSection('main-menu');
        });

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏
        document.getElementById('save-username').addEventListener('click', () => {
            this.saveUsername();
        });

        // –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        document.getElementById('add-stars-btn').addEventListener('click', () => {
            this.addStars();
        });

        document.getElementById('reset-progress').addEventListener('click', () => {
            this.resetProgress();
        });
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–¥–µ–ª
    showSection(sectionId) {
        document.querySelectorAll('.section').forEach(section => {
            section.classList.remove('active');
        });
        document.getElementById(sectionId).classList.add('active');
    }

    // –í—ã–±–æ—Ä –∫–µ–π—Å–∞
    selectCase(caseType) {
        this.currentCase = caseType;
        document.querySelector('.cases-selection').style.display = 'none';
        document.getElementById('case-opening').style.display = 'block';
        this.setupRoulette();
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –∫–µ–π—Å–∞
    showCaseSelection() {
        document.querySelector('.cases-selection').style.display = 'block';
        document.getElementById('case-opening').style.display = 'none';
        this.currentCase = null;
        this.stopRoulette();
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∞ –¥–ª—è –∫–µ–π—Å–∞
    setupRoulette() {
        console.log('üé∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∞ –¥–ª—è –∫–µ–π—Å–∞');
        const strip = document.getElementById('roulette-strip');
        strip.innerHTML = '';
        
        const totalItems = 100;
        for (let i = 0; i < totalItems; i++) {
            const nft = this.nftCollection[Math.floor(Math.random() * this.nftCollection.length)];
            const item = document.createElement('div');
            item.className = 'roulette-item';
            item.dataset.nftId = nft.id;
            
            item.innerHTML = `
                <img src="${nft.image}" alt="${nft.name}" class="nft-image">
                <div class="nft-name">${nft.name}</div>
            `;
            
            strip.appendChild(item);
        }
        
        this.currentPosition = 0;
        strip.style.transform = `translateX(${this.currentPosition}px)`;
        this.currentSpeed = 0;
        console.log('‚úÖ –ü—Ä–æ–∫—Ä—É—Ç –≥–æ—Ç–æ–≤');
    }

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞ (–ø—Ä–æ–∫—Ä—É—Ç)
    openCase() {
        if (this.isOpening) return;
        
        if (this.userData.balance < 25) {
            this.showNotification('–û—à–∏–±–∫–∞', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥!', 'error');
            return;
        }

        this.userData.balance -= 25;
        this.userData.stats.totalOpened++;
        this.isOpening = true;
        
        const openBtn = document.getElementById('open-case-btn');
        openBtn.disabled = true;
        
        this.currentSpeed = 50;
        this.animateRoulette();
        
        setTimeout(() => {
            this.stopSpin();
        }, 3000 + Math.random() * 3000);
    }

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∞
    animateRoulette() {
        const strip = document.getElementById('roulette-strip');
        
        this.currentPosition -= this.currentSpeed;
        strip.style.transform = `translateX(${this.currentPosition}px)`;
        
        if (Math.abs(this.currentPosition) > 12000) {
            this.currentPosition = 0;
        }
        
        if (this.isOpening) {
            this.animationId = requestAnimationFrame(() => this.animateRoulette());
        }
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∞
    stopSpin() {
        this.isOpening = false;
        
        const slowDown = () => {
            if (this.currentSpeed > 0) {
                this.currentSpeed -= 1.5;
                if (this.currentSpeed < 0) this.currentSpeed = 0;
                
                this.animateRoulette();
                
                if (this.currentSpeed > 0) {
                    setTimeout(slowDown, 50);
                } else {
                    this.determineWinner();
                    const openBtn = document.getElementById('open-case-btn');
                    openBtn.disabled = false;
                }
            }
        };
        
        slowDown();
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∞ (–ø—Ä–∏ –≤—ã—Ö–æ–¥–µ)
    stopRoulette() {
        this.isOpening = false;
        this.currentSpeed = 0;
        if (this.animationId) {
            cancelAnimationFrame(this.animationId);
        }
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    determineWinner() {
        const strip = document.getElementById('roulette-strip');
        const items = strip.getElementsByClassName('roulette-item');
        const centerX = window.innerWidth / 2;
        
        let closestItem = null;
        let minDistance = Infinity;
        
        for (let item of items) {
            const itemRect = item.getBoundingClientRect();
            const itemCenterX = itemRect.left + itemRect.width / 2;
            const distance = Math.abs(itemCenterX - centerX);
            
            if (distance < minDistance) {
                minDistance = distance;
                closestItem = item;
            }
        }
        
        if (!closestItem) return;
        
        const nftId = parseInt(closestItem.dataset.nftId);
        const wonNFTData = this.nftCollection.find(nft => nft.id === nftId);
        
        if (!wonNFTData) return;
        
        // –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –≤—ã–∏–≥—Ä—ã—à–∞
        this.simpleWinAnimation(closestItem, wonNFTData);
        
        const wonNFT = {
            id: Date.now(),
            name: wonNFTData.name,
            image: wonNFTData.image,
            value: wonNFTData.value,
            rarity: wonNFTData.rarity,
            fallback: wonNFTData.fallback,
            dateWon: new Date().toISOString()
        };
        
        this.userData.inventory.push(wonNFT);
        this.userData.stats.totalNFTWon++;
        
        if (wonNFT.value > this.userData.stats.mostExpensiveNFT) {
            this.userData.stats.mostExpensiveNFT = wonNFT.value;
        }
        
        this.saveUserData();
        this.updateUI();
        this.showWinNotification(wonNFT);
    }

    // –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –≤—ã–∏–≥—Ä—ã—à–∞
    simpleWinAnimation(item, nft) {
        item.classList.add('winning');
        
        this.createSimpleParticles(item);
        this.showWinText(item, nft);
        
        setTimeout(() => {
            item.classList.remove('winning');
        }, 1500);
    }

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —á–∞—Å—Ç–∏—Ü—ã
    createSimpleParticles(item) {
        const itemRect = item.getBoundingClientRect();
        const centerX = itemRect.left + itemRect.width / 2;
        const centerY = itemRect.top + itemRect.height / 2;
        
        const particleCount = 8;
        
        for (let i = 0; i < particleCount; i++) {
            const particle = document.createElement('div');
            particle.className = 'win-particle';
            
            const angle = (i / particleCount) * Math.PI * 2;
            const distance = 50;
            const x = Math.cos(angle) * distance;
            const y = Math.sin(angle) * distance;
            
            particle.style.setProperty('--x', x + 'px');
            particle.style.setProperty('--y', y + 'px');
            particle.style.left = centerX + 'px';
            particle.style.top = centerY + 'px';
            
            document.body.appendChild(particle);
            
            setTimeout(() => {
                if (particle.parentNode) {
                    particle.parentNode.removeChild(particle);
                }
            }, 800);
        }
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤—ã–∏–≥—Ä—ã—à–∞
    showWinText(item, nft) {
        const itemRect = item.getBoundingClientRect();
        const winText = document.createElement('div');
        winText.className = 'win-text';
        winText.textContent = `+${nft.value}‚≠ê ${nft.name}`;
        winText.style.left = itemRect.left + itemRect.width / 2 + 'px';
        winText.style.top = itemRect.top + 'px';
        
        document.body.appendChild(winText);
        
        setTimeout(() => {
            if (winText.parentNode) {
                winText.parentNode.removeChild(winText);
            }
        }, 1500);
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–∏–≥—Ä—ã—à–µ
    showWinNotification(nft) {
        let type = 'win';
        let title = 'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!';
        let description = `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${nft.name.toUpperCase()}!`;
        
        if (nft.value >= 100) {
            type = 'epic';
            title = 'üíé –≠–ü–ò–ß–ï–°–ö–ò–ô –í–´–ò–ì–†–´–®!';
            description = `${nft.name.toUpperCase()} - ${nft.value} ‚≠ê`;
        } else if (nft.value >= 50) {
            type = 'win';
            title = '‚≠ê –û–¢–õ–ò–ß–ù–´–ô –í–´–ò–ì–†–´–®!';
            description = `${nft.name.toUpperCase()} - ${nft.value} ‚≠ê`;
        } else {
            description = `${nft.name.toUpperCase()} - ${nft.value} ‚≠ê`;
        }
        
        this.showNotification(title, description, type, nft.image, nft.fallback);
    }

    // –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    showNotification(title, description, type = 'win', image = null, fallback = null) {
        const notifications = document.getElementById('notifications');
        const notification = document.createElement('div');
        notification.className = `notification ${type} show`;
        
        let iconContent = '';
        if (image) {
            iconContent = `<img src="${image}" alt="${title}" class="notification-icon">`;
        } else if (fallback) {
            iconContent = `<div class="notification-icon">${fallback}</div>`;
        } else {
            iconContent = `<div class="notification-icon">üéÅ</div>`;
        }
        
        notification.innerHTML = `
            <div class="notification-content">
                ${iconContent}
                <div class="notification-text">
                    <div class="notification-title">${title}</div>
                    <div class="notification-desc">${description}</div>
                </div>
                <button class="notification-close">&times;</button>
            </div>
        `;
        
        notifications.appendChild(notification);
        
        const closeBtn = notification.querySelector('.notification-close');
        closeBtn.addEventListener('click', () => {
            this.removeNotification(notification);
        });
        
        setTimeout(() => {
            if (notification.parentNode) {
                this.removeNotification(notification);
            }
        }, 4000);
    }

    removeNotification(notification) {
        notification.style.animation = 'slideOutRight 0.5s ease forwards';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 500);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    updateInventory() {
        const grid = document.getElementById('inventory-grid');
        const totalNFT = document.getElementById('total-nft');
        
        grid.innerHTML = '';
        totalNFT.textContent = this.userData.inventory.length;
        
        const sortedInventory = [...this.userData.inventory].sort((a, b) => b.value - a.value);
        
        sortedInventory.forEach((nft, index) => {
            const slot = document.createElement('div');
            slot.className = 'inventory-slot has-nft';
            
            slot.innerHTML = `
                <div class="nft-image">${nft.fallback}</div>
                <div class="nft-name">${nft.name}</div>
                <div class="nft-value">${nft.value} ‚≠ê</div>
                <button class="sell-btn" data-index="${this.userData.inventory.indexOf(nft)}">–ü—Ä–æ–¥–∞—Ç—å</button>
            `;
            
            grid.appendChild(slot);
        });
        
        document.querySelectorAll('.sell-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const index = parseInt(e.target.dataset.index);
                this.sellNFT(index);
            });
        });
        
        const emptySlots = Math.max(6, 12 - this.userData.inventory.length);
        for (let i = 0; i < emptySlots; i++) {
            const empty = document.createElement('div');
            empty.className = 'inventory-slot empty';
            empty.innerHTML = '‚ö´<br><small>–ü—É—Å—Ç–æ</small>';
            grid.appendChild(empty);
        }
    }

    // –ü—Ä–æ–¥–∞–∂–∞ NFT
    sellNFT(index) {
        const nft = this.userData.inventory[index];
        if (confirm(`–ü—Ä–æ–¥–∞—Ç—å ${nft.name} –∑–∞ ${nft.value} ‚≠ê?`)) {
            this.userData.balance += nft.value;
            this.userData.inventory.splice(index, 1);
            
            if (this.userData.inventory.length === 0) {
                this.userData.stats.mostExpensiveNFT = 0;
            } else if (nft.value === this.userData.stats.mostExpensiveNFT) {
                this.userData.stats.mostExpensiveNFT = Math.max(...this.userData.inventory.map(n => n.value));
            }
            
            this.saveUserData();
            this.updateUI();
            this.updateInventory();
            this.showNotification('üí∞ –ü—Ä–æ–¥–∞–∂–∞', `${nft.name} –ø—Ä–æ–¥–∞–Ω –∑–∞ ${nft.value} ‚≠ê!`, 'win');
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏
    saveUsername() {
        const newUsername = document.getElementById('profile-username').value.trim();
        if (newUsername && newUsername.length >= 3) {
            this.userData.username = newUsername;
            this.saveUserData();
            this.updateUI();
            this.showNotification('‚úÖ –£—Å–ø–µ—Ö', '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!', 'win');
        } else {
            this.showNotification('‚ùå –û—à–∏–±–∫–∞', '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞', 'error');
        }
    }

    // –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –î–æ–±–∞–≤–∏—Ç—å –∑–≤–µ–∑–¥—ã
    addStars() {
        const starsInput = document.getElementById('add-stars');
        const stars = parseInt(starsInput.value);
        
        if (stars > 0 && stars <= 10000) {
            this.userData.balance += stars;
            this.saveUserData();
            this.updateUI();
            this.showNotification('‚≠ê –ê–¥–º–∏–Ω', `–î–æ–±–∞–≤–ª–µ–Ω–æ ${stars} –∑–≤–µ–∑–¥!`, 'win');
        } else {
            this.showNotification('‚ùå –û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ (1-10000)', 'error');
        }
    }

    // –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
    resetProgress() {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å?')) {
            this.userData = {
                id: this.userData.id,
                username: this.userData.username,
                balance: 25,
                registrationDate: this.userData.registrationDate,
                stats: {
                    totalOpened: 0,
                    totalNFTWon: 0,
                    mostExpensiveNFT: 0
                },
                inventory: []
            };
            
            this.saveUserData();
            this.updateUI();
            this.updateInventory();
            this.showNotification('üîÑ –°–±—Ä–æ—Å', '–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω!', 'win');
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    updateProfile() {
        document.getElementById('profile-username').value = this.userData.username;
        document.getElementById('profile-balance').textContent = this.userData.balance + ' ‚≠ê';
        document.getElementById('registration-date').textContent = 
            new Date(this.userData.registrationDate).toLocaleDateString('ru-RU');
        document.getElementById('total-opened').textContent = this.userData.stats.totalOpened;
        document.getElementById('total-nft-won').textContent = this.userData.stats.totalNFTWon;
        document.getElementById('most-expensive').textContent = this.userData.stats.mostExpensiveNFT + ' ‚≠ê';
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    updateUI() {
        document.getElementById('balance').textContent = this.userData.balance;
        document.getElementById('username').textContent = this.userData.username;
        this.updateProfile();
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    console.log('=== NFT CASES –ó–ê–ü–£–©–ï–ù ===');
    new NFTCases();
});