class FoxGame {
    constructor() {
        this.tg = null;
        this.userData = null;
        this.isOpening = false;
        this.nftCollection = [];
        this.currentCase = null;
        this.animationId = null;
        this.currentSpeed = 0;
        this.currentPosition = 0;
        this.adminIds = ['7927169998', '1241573286'];
        this.allUsersData = this.loadAllUsersData();
        this.currentManagedUser = null;
        this.init();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
    async init() {
        console.log('üéÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FoxGame');
        
        try {
            this.tg = window.Telegram.WebApp;
            this.tg.expand();
            
            await this.initTelegramUser();
            await this.loadNFTCollection();
            this.showLoadingScreen();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram:', error);
            await this.initTestUser();
            await this.loadNFTCollection();
            this.showLoadingScreen();
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
    async initTelegramUser() {
        const initDataUnsafe = this.tg.initDataUnsafe || {};
        const user = initDataUnsafe.user || {};
        
        console.log('Telegram User:', user);
        
        if (user && user.id) {
            const userId = user.id.toString();
            this.userData = this.loadUserData(userId, user);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–±—â—É—é –±–∞–∑—É
            this.allUsersData[userId] = this.userData;
            this.saveAllUsersData();
            
        } else {
            throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
    }

    // –†–µ–∑–µ—Ä–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    async initTestUser() {
        const testUserId = 'test_user_' + Math.random().toString(36).substr(2, 9);
        const testUser = {
            id: testUserId,
            first_name: 'Test',
            last_name: 'User',
            username: 'testuser'
        };
        
        this.userData = this.loadUserData(testUserId, testUser);
        this.allUsersData[testUserId] = this.userData;
        this.saveAllUsersData();
        
        console.log('‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º. –ó–∞–ø—É—Å–∫ –≤–Ω–µ Telegram');
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    loadUserData(userId, telegramUser) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –æ–±—â–µ–π –±–∞–∑–µ
        if (this.allUsersData[userId]) {
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ:', this.allUsersData[userId]);
            return this.allUsersData[userId];
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log('üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
        return {
            id: userId,
            username: telegramUser.username || 
                     [telegramUser.first_name, telegramUser.last_name].filter(Boolean).join(' ') || 
                     '–ò–≥—Ä–æ–∫' + Math.floor(Math.random() * 1000),
            firstName: telegramUser.first_name || '',
            lastName: telegramUser.last_name || '',
            telegramUsername: telegramUser.username || '',
            balance: 25,
            registrationDate: new Date().toISOString(),
            stats: {
                totalOpened: 0,
                totalNFTWon: 0,
                mostExpensiveNFT: 0
            },
            inventory: [],
            isBanned: false,
            isTelegramUser: !!telegramUser.id
        };
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ localStorage
    loadAllUsersData() {
        try {
            const data = localStorage.getItem('foxgame_all_users');
            if (data) {
                const parsed = JSON.parse(data);
                console.log('üìä –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –±–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', Object.keys(parsed).length, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
                return parsed;
            }
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', e);
        }
        
        console.log('üÜï –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –±–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        return {};
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    saveUserData() {
        if (this.userData && this.userData.id) {
            this.allUsersData[this.userData.id] = this.userData;
            this.saveAllUsersData();
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ localStorage
    saveAllUsersData() {
        try {
            localStorage.setItem('foxgame_all_users', JSON.stringify(this.allUsersData));
            console.log('üíæ –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', Object.keys(this.allUsersData).length, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', e);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    isAdmin() {
        return this.userData && this.adminIds.includes(this.userData.id);
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ NFT –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –∫–µ–π—Å–æ–≤
    async loadNFTCollection() {
        console.log('üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ NFT –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –∫–µ–π—Å–æ–≤...');
        
        const basePath = 'NFT/';
        
        this.nftCollection = [
            { id: 1, name: '–ú–µ–¥–≤–µ–¥—å', image: `${basePath}bear/bear.gif`, value: 15, rarity: 'common', weight: 80, fallback: 'üß∏' },
            { id: 2, name: '–°–µ—Ä–¥—Ü–µ', image: `${basePath}heart/heart.gif`, value: 15, rarity: 'common', weight: 80, fallback: '‚ù§Ô∏è' },
            { id: 3, name: '–†–æ–∑–∞', image: `${basePath}rose/rose.gif`, value: 25, rarity: 'uncommon', weight: 10, fallback: 'üåπ' },
            { id: 4, name: '–ü–æ–¥–∞—Ä–æ–∫', image: `${basePath}gift/gift.gif`, value: 25, rarity: 'uncommon', weight: 10, fallback: 'üéÅ' },
            { id: 5, name: '–¢–æ—Ä—Ç', image: `${basePath}cake/cake.gif`, value: 50, rarity: 'rare', weight: 7, fallback: 'üéÇ' },
            { id: 6, name: '–†–∞–∫–µ—Ç–∞', image: `${basePath}rocket/rocket.gif`, value: 50, rarity: 'rare', weight: 7, fallback: 'üöÄ' },
            { id: 7, name: '–¶–≤–µ—Ç—ã', image: `${basePath}flowers/flowers.gif`, value: 50, rarity: 'rare', weight: 7, fallback: 'üíê' },
            { id: 8, name: '–ö—É–±–æ–∫', image: `${basePath}cup/cup.gif`, value: 100, rarity: 'epic', weight: 3, fallback: 'üèÜ' },
            { id: 9, name: '–ö–æ–ª—å—Ü–æ', image: `${basePath}ring/ring.gif`, value: 100, rarity: 'epic', weight: 3, fallback: 'üíç' },
            { id: 10, name: '–ê–ª–º–∞–∑', image: `${basePath}diamond/diamond.gif`, value: 100, rarity: 'epic', weight: 3, fallback: 'üíé' },
        ];

        console.log('‚úÖ NFT –∫–æ–ª–ª–µ–∫—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        return Promise.resolve();
    }

    // –≠–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
    showLoadingScreen() {
        console.log('üì± –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏');
        const startTime = Date.now();
        const loadingTime = 1500;
        
        const updateTime = () => {
            const elapsed = (Date.now() - startTime) / 1000;
            document.getElementById('loading-time').textContent = elapsed.toFixed(2) + 's';
            
            if (elapsed * 1000 < loadingTime) {
                requestAnimationFrame(updateTime);
            } else {
                this.completeLoading();
            }
        };
        
        updateTime();
    }

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    completeLoading() {
        console.log('‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        document.getElementById('loading').style.display = 'none';
        document.querySelector('.container').style.display = 'block';
        this.setupEventListeners();
        this.updateUI();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
        if (this.isAdmin()) {
            document.getElementById('admin-btn').style.display = 'block';
            this.showNotification('üëë –ê–¥–º–∏–Ω', '–î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω', 'win');
            console.log('üîì –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', this.userData.id);
        }
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    setupEventListeners() {
        console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π');
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        document.getElementById('cases-btn').addEventListener('click', () => {
            this.showSection('cases-section');
        });
        
        document.getElementById('inventory-btn').addEventListener('click', () => {
            this.showSection('inventory-section');
            this.updateInventory();
        });
        
        document.getElementById('profile-btn').addEventListener('click', () => {
            this.showSection('profile-section');
            this.updateProfile();
        });

        // –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        document.getElementById('admin-btn').addEventListener('click', () => {
            this.showSection('admin-section');
            this.updateAdminPanel();
        });

        // –í—ã–±–æ—Ä –∫–µ–π—Å–∞
        document.querySelectorAll('.case-card').forEach(card => {
            card.addEventListener('click', (e) => {
                const caseType = e.currentTarget.dataset.case;
                this.selectCase(caseType);
            });
        });

        // –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞
        document.getElementById('open-case-btn').addEventListener('click', () => {
            this.openCase();
        });

        // –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫–µ–π—Å–æ–≤
        document.getElementById('back-to-cases').addEventListener('click', () => {
            this.showCaseSelection();
        });

        // –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –∫–µ–π—Å–æ–≤
        document.getElementById('back-cases-main').addEventListener('click', () => {
            this.showSection('main-menu');
        });

        // –ö–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
        document.getElementById('back-btn-inventory').addEventListener('click', () => {
            this.showSection('main-menu');
        });
        
        document.getElementById('back-btn-profile').addEventListener('click', () => {
            this.showSection('main-menu');
        });

        document.getElementById('back-btn-admin').addEventListener('click', () => {
            this.showSection('main-menu');
        });

        // –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        document.getElementById('search-user').addEventListener('click', () => {
            this.searchUser();
        });

        // –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º
        document.getElementById('add-balance').addEventListener('click', () => {
            this.modifyUserBalance(true);
        });

        document.getElementById('remove-balance').addEventListener('click', () => {
            this.modifyUserBalance(false);
        });

        // –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –±–∞–Ω/—Ä–∞–∑–±–∞–Ω
        document.getElementById('ban-user').addEventListener('click', () => {
            this.banUser(true);
        });

        document.getElementById('unban-user').addEventListener('click', () => {
            this.banUser(false);
        });

        // –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: —Å–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        document.getElementById('reset-user').addEventListener('click', () => {
            this.resetUserProgress();
        });

        // –ü–æ–∏—Å–∫ –ø–æ Enter
        document.getElementById('user-search').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.searchUser();
            }
        });
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–¥–µ–ª
    showSection(sectionId) {
        document.querySelectorAll('.section').forEach(section => {
            section.classList.remove('active');
        });
        document.getElementById(sectionId).classList.add('active');
    }

    // –í—ã–±–æ—Ä –∫–µ–π—Å–∞
    selectCase(caseType) {
        this.currentCase = caseType;
        document.querySelector('.cases-selection').style.display = 'none';
        document.getElementById('case-opening').style.display = 'block';
        this.setupRoulette();
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –∫–µ–π—Å–∞
    showCaseSelection() {
        document.querySelector('.cases-selection').style.display = 'block';
        document.getElementById('case-opening').style.display = 'none';
        this.currentCase = null;
        this.stopRoulette();
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∞ –¥–ª—è –∫–µ–π—Å–∞
    setupRoulette() {
        console.log('üé∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∞ –¥–ª—è –∫–µ–π—Å–∞');
        const strip = document.getElementById('roulette-strip');
        strip.innerHTML = '';
        
        const totalItems = 100;
        for (let i = 0; i < totalItems; i++) {
            const nft = this.nftCollection[Math.floor(Math.random() * this.nftCollection.length)];
            const item = document.createElement('div');
            item.className = 'roulette-item';
            item.dataset.nftId = nft.id;
            
            item.innerHTML = `
                <img src="${nft.image}" alt="${nft.name}" class="nft-image" onerror="this.style.display='none'; this.parentNode.innerHTML += '<div class=\"nft-fallback\">${nft.fallback}</div>'">
                <div class="nft-name">${nft.name}</div>
            `;
            
            strip.appendChild(item);
        }
        
        this.currentPosition = 0;
        strip.style.transform = `translateX(${this.currentPosition}px)`;
        this.currentSpeed = 0;
        console.log('‚úÖ –ü—Ä–æ–∫—Ä—É—Ç –≥–æ—Ç–æ–≤');
    }

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞ (–ø—Ä–æ–∫—Ä—É—Ç)
    openCase() {
        if (this.isOpening) return;
        
        if (this.userData.isBanned) {
            this.showNotification('–û—à–∏–±–∫–∞', '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!', 'error');
            return;
        }
        
        if (this.userData.balance < 25) {
            this.showNotification('–û—à–∏–±–∫–∞', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥!', 'error');
            return;
        }

        this.userData.balance -= 25;
        this.userData.stats.totalOpened++;
        this.isOpening = true;
        
        const openBtn = document.getElementById('open-case-btn');
        openBtn.disabled = true;
        
        this.currentSpeed = 50;
        this.animateRoulette();
        
        setTimeout(() => {
            this.stopSpin();
        }, 3000 + Math.random() * 3000);
    }

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∞
    animateRoulette() {
        const strip = document.getElementById('roulette-strip');
        
        this.currentPosition -= this.currentSpeed;
        strip.style.transform = `translateX(${this.currentPosition}px)`;
        
        if (Math.abs(this.currentPosition) > 12000) {
            this.currentPosition = 0;
        }
        
        if (this.isOpening) {
            this.animationId = requestAnimationFrame(() => this.animateRoulette());
        }
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∞
    stopSpin() {
        this.isOpening = false;
        
        const slowDown = () => {
            if (this.currentSpeed > 0) {
                this.currentSpeed -= 1.5;
                if (this.currentSpeed < 0) this.currentSpeed = 0;
                
                this.animateRoulette();
                
                if (this.currentSpeed > 0) {
                    setTimeout(slowDown, 50);
                } else {
                    this.determineWinner();
                    const openBtn = document.getElementById('open-case-btn');
                    openBtn.disabled = false;
                }
            }
        };
        
        slowDown();
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∞ (–ø—Ä–∏ –≤—ã—Ö–æ–¥–µ)
    stopRoulette() {
        this.isOpening = false;
        this.currentSpeed = 0;
        if (this.animationId) {
            cancelAnimationFrame(this.animationId);
        }
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    determineWinner() {
        const strip = document.getElementById('roulette-strip');
        const items = strip.getElementsByClassName('roulette-item');
        const centerX = window.innerWidth / 2;
        
        let closestItem = null;
        let minDistance = Infinity;
        
        for (let item of items) {
            const itemRect = item.getBoundingClientRect();
            const itemCenterX = itemRect.left + itemRect.width / 2;
            const distance = Math.abs(itemCenterX - centerX);
            
            if (distance < minDistance) {
                minDistance = distance;
                closestItem = item;
            }
        }
        
        if (!closestItem) return;
        
        const nftId = parseInt(closestItem.dataset.nftId);
        const wonNFTData = this.nftCollection.find(nft => nft.id === nftId);
        
        if (!wonNFTData) return;
        
        this.simpleWinAnimation(closestItem, wonNFTData);
        
        const wonNFT = {
            id: Date.now(),
            name: wonNFTData.name,
            image: wonNFTData.image,
            value: wonNFTData.value,
            rarity: wonNFTData.rarity,
            fallback: wonNFTData.fallback,
            dateWon: new Date().toISOString()
        };
        
        this.userData.inventory.push(wonNFT);
        this.userData.stats.totalNFTWon++;
        
        if (wonNFT.value > this.userData.stats.mostExpensiveNFT) {
            this.userData.stats.mostExpensiveNFT = wonNFT.value;
        }
        
        this.saveUserData();
        this.updateUI();
        this.showWinNotification(wonNFT);
    }

    // –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –≤—ã–∏–≥—Ä—ã—à–∞
    simpleWinAnimation(item, nft) {
        item.classList.add('winning');
        
        this.createSimpleParticles(item);
        this.showWinText(item, nft);
        
        setTimeout(() => {
            item.classList.remove('winning');
        }, 1500);
    }

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —á–∞—Å—Ç–∏—Ü—ã
    createSimpleParticles(item) {
        const itemRect = item.getBoundingClientRect();
        const centerX = itemRect.left + itemRect.width / 2;
        const centerY = itemRect.top + itemRect.height / 2;
        
        const particleCount = 8;
        
        for (let i = 0; i < particleCount; i++) {
            const particle = document.createElement('div');
            particle.className = 'win-particle';
            
            const angle = (i / particleCount) * Math.PI * 2;
            const distance = 50;
            const x = Math.cos(angle) * distance;
            const y = Math.sin(angle) * distance;
            
            particle.style.setProperty('--x', x + 'px');
            particle.style.setProperty('--y', y + 'px');
            particle.style.left = centerX + 'px';
            particle.style.top = centerY + 'px';
            
            document.body.appendChild(particle);
            
            setTimeout(() => {
                if (particle.parentNode) {
                    particle.parentNode.removeChild(particle);
                }
            }, 800);
        }
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤—ã–∏–≥—Ä—ã—à–∞
    showWinText(item, nft) {
        const itemRect = item.getBoundingClientRect();
        const winText = document.createElement('div');
        winText.className = 'win-text';
        winText.textContent = `+${nft.value}‚≠ê ${nft.name}`;
        winText.style.left = itemRect.left + itemRect.width / 2 + 'px';
        winText.style.top = itemRect.top + 'px';
        
        document.body.appendChild(winText);
        
        setTimeout(() => {
            if (winText.parentNode) {
                winText.parentNode.removeChild(winText);
            }
        }, 1500);
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–∏–≥—Ä—ã—à–µ
    showWinNotification(nft) {
        let type = 'win';
        let title = 'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!';
        let description = `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${nft.name.toUpperCase()}!`;
        
        if (nft.value >= 100) {
            type = 'epic';
            title = 'üíé –≠–ü–ò–ß–ï–°–ö–ò–ô –í–´–ò–ì–†–´–®!';
            description = `${nft.name.toUpperCase()} - ${nft.value} ‚≠ê`;
        } else if (nft.value >= 50) {
            type = 'win';
            title = '‚≠ê –û–¢–õ–ò–ß–ù–´–ô –í–´–ò–ì–†–´–®!';
            description = `${nft.name.toUpperCase()} - ${nft.value} ‚≠ê`;
        } else {
            description = `${nft.name.toUpperCase()} - ${nft.value} ‚≠ê`;
        }
        
        this.showNotification(title, description, type, nft.image, nft.fallback);
    }

    // –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    showNotification(title, description, type = 'win', image = null, fallback = null) {
        const notifications = document.getElementById('notifications');
        const notification = document.createElement('div');
        notification.className = `notification ${type} show`;
        
        let iconContent = '';
        if (image) {
            iconContent = `<img src="${image}" alt="${title}" class="notification-icon" onerror="this.style.display='none'; this.parentNode.innerHTML = '<div class=\"notification-icon\">${fallback || 'üéÅ'}</div>' + this.parentNode.innerHTML;">`;
        } else if (fallback) {
            iconContent = `<div class="notification-icon">${fallback}</div>`;
        } else {
            iconContent = `<div class="notification-icon">üéÅ</div>`;
        }
        
        notification.innerHTML = `
            <div class="notification-content">
                ${iconContent}
                <div class="notification-text">
                    <div class="notification-title">${title}</div>
                    <div class="notification-desc">${description}</div>
                </div>
                <button class="notification-close">&times;</button>
            </div>
        `;
        
        notifications.appendChild(notification);
        
        const closeBtn = notification.querySelector('.notification-close');
        closeBtn.addEventListener('click', () => {
            this.removeNotification(notification);
        });
        
        setTimeout(() => {
            if (notification.parentNode) {
                this.removeNotification(notification);
            }
        }, 4000);
    }

    removeNotification(notification) {
        notification.style.animation = 'slideOutRight 0.5s ease forwards';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 500);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    updateInventory() {
        const grid = document.getElementById('inventory-grid');
        const totalNFT = document.getElementById('total-nft');
        
        grid.innerHTML = '';
        totalNFT.textContent = this.userData.inventory.length;
        
        const sortedInventory = [...this.userData.inventory].sort((a, b) => b.value - a.value);
        
        sortedInventory.forEach((nft, index) => {
            const slot = document.createElement('div');
            slot.className = 'inventory-slot has-nft';
            
            slot.innerHTML = `
                <div class="nft-image">${nft.fallback}</div>
                <div class="nft-name">${nft.name}</div>
                <div class="nft-value">${nft.value} ‚≠ê</div>
                <button class="sell-btn" data-index="${this.userData.inventory.indexOf(nft)}">–ü—Ä–æ–¥–∞—Ç—å</button>
            `;
            
            grid.appendChild(slot);
        });
        
        document.querySelectorAll('.sell-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const index = parseInt(e.target.dataset.index);
                this.sellNFT(index);
            });
        });
        
        const emptySlots = Math.max(6, 12 - this.userData.inventory.length);
        for (let i = 0; i < emptySlots; i++) {
            const empty = document.createElement('div');
            empty.className = 'inventory-slot empty';
            empty.innerHTML = '‚ö´<br><small>–ü—É—Å—Ç–æ</small>';
            grid.appendChild(empty);
        }
    }

    // –ü—Ä–æ–¥–∞–∂–∞ NFT
    sellNFT(index) {
        const nft = this.userData.inventory[index];
        if (confirm(`–ü—Ä–æ–¥–∞—Ç—å ${nft.name} –∑–∞ ${nft.value} ‚≠ê?`)) {
            this.userData.balance += nft.value;
            this.userData.inventory.splice(index, 1);
            
            if (this.userData.inventory.length === 0) {
                this.userData.stats.mostExpensiveNFT = 0;
            } else if (nft.value === this.userData.stats.mostExpensiveNFT) {
                this.userData.stats.mostExpensiveNFT = Math.max(...this.userData.inventory.map(n => n.value));
            }
            
            this.saveUserData();
            this.updateUI();
            this.updateInventory();
            this.showNotification('üí∞ –ü—Ä–æ–¥–∞–∂–∞', `${nft.name} –ø—Ä–æ–¥–∞–Ω –∑–∞ ${nft.value} ‚≠ê!`, 'win');
        }
    }

    // –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    searchUser() {
        const searchTerm = document.getElementById('user-search').value.trim();
        if (!searchTerm) {
            this.showNotification('‚ùå –û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
            return;
        }

        let foundUser = null;
        
        // –ò—â–µ–º –ø–æ ID
        if (this.allUsersData[searchTerm]) {
            foundUser = this.allUsersData[searchTerm];
        } else {
            // –ò—â–µ–º –ø–æ –∏–º–µ–Ω–∏
            for (const userId in this.allUsersData) {
                if (this.allUsersData[userId].username.toLowerCase().includes(searchTerm.toLowerCase())) {
                    foundUser = this.allUsersData[userId];
                    break;
                }
            }
        }

        if (foundUser) {
            this.currentManagedUser = foundUser;
            this.updateUserManagementInfo();
            this.showNotification('‚úÖ –ù–∞–π–¥–µ–Ω–æ', `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${foundUser.username} (ID: ${foundUser.id})`, 'win');
        } else {
            this.showNotification('‚ùå –û—à–∏–±–∫–∞', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
        }
    }

    // –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    updateUserManagementInfo() {
        if (!this.currentManagedUser) {
            document.getElementById('admin-user-id').textContent = '-';
            document.getElementById('admin-username').textContent = '-';
            document.getElementById('admin-balance').textContent = '-';
            document.getElementById('admin-status').textContent = '-';
            document.getElementById('admin-status').className = 'status-active';
            return;
        }

        document.getElementById('admin-user-id').textContent = this.currentManagedUser.id;
        document.getElementById('admin-username').textContent = this.currentManagedUser.username;
        document.getElementById('admin-balance').textContent = this.currentManagedUser.balance + ' ‚≠ê';
        
        const statusElement = document.getElementById('admin-status');
        if (this.currentManagedUser.isBanned) {
            statusElement.textContent = '–ó–∞–±–∞–Ω–µ–Ω';
            statusElement.className = 'status-banned';
        } else {
            statusElement.textContent = '–ê–∫—Ç–∏–≤–µ–Ω';
            statusElement.className = 'status-active';
        }
    }

    // –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    modifyUserBalance(isAdd) {
        if (!this.currentManagedUser) {
            this.showNotification('‚ùå –û—à–∏–±–∫–∞', '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
            return;
        }

        const amountInput = document.getElementById('balance-amount');
        const amount = parseInt(amountInput.value);
        
        if (isNaN(amount) || amount <= 0) {
            this.showNotification('‚ùå –û—à–∏–±–∫–∞', '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É', 'error');
            return;
        }

        if (isAdd) {
            this.currentManagedUser.balance += amount;
            this.showNotification('‚úÖ –£—Å–ø–µ—Ö', `–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${this.currentManagedUser.username} —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ ${amount} ‚≠ê`, 'win');
        } else {
            if (this.currentManagedUser.balance < amount) {
                this.currentManagedUser.balance = 0;
                this.showNotification('‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ', `–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${this.currentManagedUser.username} –æ–±–Ω—É–ª–µ–Ω`, 'warning');
            } else {
                this.currentManagedUser.balance -= amount;
                this.showNotification('‚úÖ –£—Å–ø–µ—Ö', `–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${this.currentManagedUser.username} —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ ${amount} ‚≠ê`, 'win');
            }
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        this.allUsersData[this.currentManagedUser.id] = this.currentManagedUser;
        this.saveAllUsersData();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        this.updateUserManagementInfo();
        this.updateUsersList();

        // –û–±–Ω–æ–≤–ª—è–µ–º UI –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (this.currentManagedUser.id === this.userData.id) {
            this.userData = this.currentManagedUser;
            this.updateUI();
        }
    }

    // –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –±–∞–Ω/—Ä–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    banUser(isBan) {
        if (!this.currentManagedUser) {
            this.showNotification('‚ùå –û—à–∏–±–∫–∞', '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
            return;
        }

        this.currentManagedUser.isBanned = isBan;
        this.allUsersData[this.currentManagedUser.id] = this.currentManagedUser;
        this.saveAllUsersData();

        if (isBan) {
            this.showNotification('‚úÖ –£—Å–ø–µ—Ö', `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${this.currentManagedUser.username} –∑–∞–±–∞–Ω–µ–Ω`, 'warning');
        } else {
            this.showNotification('‚úÖ –£—Å–ø–µ—Ö', `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${this.currentManagedUser.username} —Ä–∞–∑–±–∞–Ω–µ–Ω`, 'win');
        }

        this.updateUserManagementInfo();
        this.updateUsersList();
    }

    // –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: —Å–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    resetUserProgress() {
        if (!this.currentManagedUser) {
            this.showNotification('‚ùå –û—à–∏–±–∫–∞', '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'error');
            return;
        }

        if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${this.currentManagedUser.username}?`)) {
            this.currentManagedUser.balance = 25;
            this.currentManagedUser.inventory = [];
            this.currentManagedUser.stats = {
                totalOpened: 0,
                totalNFTWon: 0,
                mostExpensiveNFT: 0
            };
            this.currentManagedUser.isBanned = false;

            this.allUsersData[this.currentManagedUser.id] = this.currentManagedUser;
            this.saveAllUsersData();

            this.showNotification('‚úÖ –£—Å–ø–µ—Ö', `–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${this.currentManagedUser.username} —Å–±—Ä–æ—à–µ–Ω`, 'win');
            this.updateUserManagementInfo();
            this.updateUsersList();

            // –û–±–Ω–æ–≤–ª—è–µ–º UI –µ—Å–ª–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (this.currentManagedUser.id === this.userData.id) {
                this.userData = this.currentManagedUser;
                this.updateUI();
            }
        }
    }

    // –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    updateUsersList() {
        const usersGrid = document.getElementById('users-grid');
        const totalUsers = document.getElementById('total-users');
        
        usersGrid.innerHTML = '';
        totalUsers.textContent = Object.keys(this.allUsersData).length;

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –¥–∞—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        const sortedUsers = Object.values(this.allUsersData).sort((a, b) => 
            new Date(b.registrationDate) - new Date(a.registrationDate)
        );

        sortedUsers.forEach(user => {
            const userCard = document.createElement('div');
            userCard.className = 'user-card';
            if (user.isBanned) {
                userCard.classList.add('banned');
            }
            if (user.id === this.userData.id) {
                userCard.classList.add('current-user');
            }
            
            userCard.innerHTML = `
                <div class="user-card-id">ID: ${user.id}</div>
                <div class="user-card-name">${user.username}</div>
                <div class="user-card-balance">${user.balance} ‚≠ê</div>
                <div class="user-card-stats">
                    <small>–ö–µ–π—Å—ã: ${user.stats.totalOpened}</small>
                    <small>NFT: ${user.stats.totalNFTWon}</small>
                </div>
                <div class="user-card-status ${user.isBanned ? 'status-banned' : 'status-active'}">
                    ${user.isBanned ? 'üî¥ –ó–∞–±–∞–Ω–µ–Ω' : 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω'}
                    ${user.id === this.userData.id ? ' (–í—ã)' : ''}
                </div>
            `;
            
            userCard.addEventListener('click', () => {
                this.currentManagedUser = user;
                this.updateUserManagementInfo();
            });
            
            usersGrid.appendChild(userCard);
        });

        if (sortedUsers.length === 0) {
            usersGrid.innerHTML = '<div class="no-users">–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>';
        }
    }

    // –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–π –ø–∞–Ω–µ–ª–∏
    updateAdminPanel() {
        this.updateUsersList();
        this.currentManagedUser = null;
        document.getElementById('user-search').value = '';
        this.updateUserManagementInfo();
        
        console.log('üìä –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ:', Object.keys(this.allUsersData).length);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    updateProfile() {
        document.getElementById('user-id').textContent = this.userData.id;
        document.getElementById('profile-username').textContent = this.userData.username;
        document.getElementById('profile-balance').textContent = this.userData.balance + ' ‚≠ê';
        document.getElementById('registration-date').textContent = new Date(this.userData.registrationDate).toLocaleDateString('ru-RU');
        
        document.getElementById('total-opened').textContent = this.userData.stats.totalOpened;
        document.getElementById('total-nft-won').textContent = this.userData.stats.totalNFTWon;
        document.getElementById('most-expensive').textContent = this.userData.stats.mostExpensiveNFT + ' ‚≠ê';
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
    updateUI() {
        document.getElementById('balance').textContent = this.userData.balance;
        document.getElementById('username').textContent = this.userData.username;
        
        const levelBadge = document.querySelector('.level-badge');
        if (this.userData.stats.totalOpened >= 50) {
            levelBadge.textContent = '–≠–∫—Å–ø–µ—Ä—Ç';
            levelBadge.className = 'level-badge expert';
        } else if (this.userData.stats.totalOpened >= 20) {
            levelBadge.textContent = '–û–ø—ã—Ç–Ω—ã–π';
            levelBadge.className = 'level-badge experienced';
        } else {
            levelBadge.textContent = '–ù–æ–≤–∏—á–æ–∫';
            levelBadge.className = 'level-badge';
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
document.addEventListener('DOMContentLoaded', () => {
    window.foxGame = new FoxGame();
});
